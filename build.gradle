plugins {
  id "com.github.ben-manes.versions" version "0.48.0"
  id 'java-library'
  id 'application'
  id 'maven-publish'
  id 'signing'
}

repositories {
	mavenLocal()
	mavenCentral()
	maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
	maven { url 'https://s01.oss.sonatype.org/content/repositories/snapshots' }
}

group = 'io.calimero'
version = '3.0-SNAPSHOT'

sourceCompatibility = 17
targetCompatibility = 17

compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'
javadoc.options.encoding = 'UTF-8'


application {
	mainModule = "io.calimero.tools"
	mainClass = System.getProperty("mainClass") ?: 'io.calimero.tools.Main'
}

run {
	standardInput = System.in
}

java {
    withSourcesJar()
    withJavadocJar()
    
    registerFeature('serial') {
        usingSourceSet(sourceSets.main)
    }
    registerFeature('usb') {
        usingSourceSet(sourceSets.main)
    }
}

tasks.withType(Jar).configureEach {
    from("${projectDir}") {
        include 'LICENSE.txt'
        into "META-INF"
    }
    if (name == 'sourcesJar') {
        from("${projectDir}") {
            include 'README.md'
        }
    }
}

compileJava.options*.compilerArgs = [
	'-Xlint:all',
	'-Xlint:-try',
	'-Xlint:-options',
	"--add-reads", "io.calimero.tools=ALL-UNNAMED"
]

compileTestJava.options*.compilerArgs = [
	'-Xlint:all',
	'-Xlint:-try',
]

tasks.named('compileJava') {
    options.javaModuleVersion = provider { project.version }
}

sourceSets {
	main {
		java.srcDirs = [ 'src' ]
		resources.srcDir 'resources'
	}
	test {
		java.srcDirs = [ 'test' ]
	}
}

tasks.withType(Javadoc).configureEach {
    options.addStringOption("Xdoclint:-missing", '-quiet')
    options.addStringOption("-add-reads", "io.calimero.tools=ALL-UNNAMED") // zip4j
}

def addReads = [ "--add-reads", "io.calimero.tools=ALL-UNNAMED", // zip4j
                 "--add-reads", "io.calimero.core=io.calimero.tools", // @LinkEvent
                 "--add-reads", "io.calimero.serial.provider.rxtx=ALL-UNNAMED",
                 "--add-reads", "io.calimero.usb.provider.javax=ALL-UNNAMED" ]

tasks.withType(JavaExec).configureEach {
    jvmArgs += addReads
}

startScripts {
    defaultJvmOpts = addReads
}

dependencies {
	api "io.calimero:calimero-core:${version}"
	implementation 'net.lingala.zip4j:zip4j:2.11.5'
	serialRuntimeOnly "io.calimero:calimero-rxtx:${version}"
	serialRuntimeOnly "io.calimero:serial-native:${version}"
	usbRuntimeOnly "io.calimero:calimero-usb:${version}"

	runtimeOnly 'org.slf4j:slf4j-jdk-platform-logging:2.0.9'
	runtimeOnly 'org.slf4j:slf4j-simple:2.0.9'
}

jar {
	manifest {
		attributes(
			'Main-Class': application.mainClass,
			'Class-Path': configurations.runtimeClasspath.collect { it.getName() }.join(' ')
		)
	}
}

distTar {
    duplicatesStrategy = 'EXCLUDE'
}

distZip {
    duplicatesStrategy = 'EXCLUDE'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = rootProject.name
            from components.java
            pom {
                name = 'Calimero Tools'
                description = 'A collection of tools for KNX network communication'
                url = 'https://github.com/calimero-project/calimero-tools'
                inceptionYear = '2006'
                licenses {
                    license {
                        name = "GNU General Public License, version 2, with the Classpath Exception"
                        url = 'LICENSE.txt'
                    }
                }
                developers {
                    developer {
                        name = "Boris Malinowsky"
                        email = "b.malinowsky@gmail.com"
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/calimero-project/calimero-tools.git'
                    url = 'https://github.com/calimero-project/calimero-tools.git'
                }
            }
        }
    }
    repositories {
        maven {
            name 'maven'
            def releasesRepoUrl = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2"
            def snapshotsRepoUrl = "https://s01.oss.sonatype.org/content/repositories/snapshots"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            credentials(PasswordCredentials)
        }
    }
}

signing {
    if (project.hasProperty("signing.keyId")) {
        sign publishing.publications.mavenJava
    }
}
